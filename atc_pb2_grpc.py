# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import atc_pb2 as atc__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in atc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AirTrafficControlStub(object):
    """Define the ATC service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IncomingAirway = channel.unary_unary(
                '/atc.AirTrafficControl/IncomingAirway',
                request_serializer=atc__pb2.AirwayRequest.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)
        self.DepartingAirway = channel.unary_unary(
                '/atc.AirTrafficControl/DepartingAirway',
                request_serializer=atc__pb2.AirwayRequest.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)
        self.LandingRunway = channel.unary_unary(
                '/atc.AirTrafficControl/LandingRunway',
                request_serializer=atc__pb2.RunwayRequest.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)
        self.DepartingRunway = channel.unary_unary(
                '/atc.AirTrafficControl/DepartingRunway',
                request_serializer=atc__pb2.RunwayRequest.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)
        self.GateAssignment = channel.unary_unary(
                '/atc.AirTrafficControl/GateAssignment',
                request_serializer=atc__pb2.GateRequest.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)
        self.AssignAircraft = channel.unary_unary(
                '/atc.AirTrafficControl/AssignAircraft',
                request_serializer=atc__pb2.AssignAircraftRequest.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)
        self.ReleaseRunways = channel.unary_unary(
                '/atc.AirTrafficControl/ReleaseRunways',
                request_serializer=atc__pb2.Empty.SerializeToString,
                response_deserializer=atc__pb2.Response.FromString,
                _registered_method=True)


class AirTrafficControlServicer(object):
    """Define the ATC service
    """

    def IncomingAirway(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepartingAirway(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LandingRunway(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepartingRunway(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GateAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignAircraft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseRunways(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AirTrafficControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IncomingAirway': grpc.unary_unary_rpc_method_handler(
                    servicer.IncomingAirway,
                    request_deserializer=atc__pb2.AirwayRequest.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
            'DepartingAirway': grpc.unary_unary_rpc_method_handler(
                    servicer.DepartingAirway,
                    request_deserializer=atc__pb2.AirwayRequest.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
            'LandingRunway': grpc.unary_unary_rpc_method_handler(
                    servicer.LandingRunway,
                    request_deserializer=atc__pb2.RunwayRequest.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
            'DepartingRunway': grpc.unary_unary_rpc_method_handler(
                    servicer.DepartingRunway,
                    request_deserializer=atc__pb2.RunwayRequest.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
            'GateAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.GateAssignment,
                    request_deserializer=atc__pb2.GateRequest.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
            'AssignAircraft': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignAircraft,
                    request_deserializer=atc__pb2.AssignAircraftRequest.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
            'ReleaseRunways': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseRunways,
                    request_deserializer=atc__pb2.Empty.FromString,
                    response_serializer=atc__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'atc.AirTrafficControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('atc.AirTrafficControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AirTrafficControl(object):
    """Define the ATC service
    """

    @staticmethod
    def IncomingAirway(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/IncomingAirway',
            atc__pb2.AirwayRequest.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DepartingAirway(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/DepartingAirway',
            atc__pb2.AirwayRequest.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LandingRunway(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/LandingRunway',
            atc__pb2.RunwayRequest.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DepartingRunway(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/DepartingRunway',
            atc__pb2.RunwayRequest.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GateAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/GateAssignment',
            atc__pb2.GateRequest.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignAircraft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/AssignAircraft',
            atc__pb2.AssignAircraftRequest.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseRunways(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/atc.AirTrafficControl/ReleaseRunways',
            atc__pb2.Empty.SerializeToString,
            atc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
